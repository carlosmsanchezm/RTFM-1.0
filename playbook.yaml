- name: Ensure Python is Installed on All Remote Hosts
  hosts: all
  gather_facts: false
  become: true
  tasks:
    - name: Install Python if not present
      ansible.builtin.raw: test -e /usr/bin/python || (sudo yum -y update && sudo yum -y install python3)
      changed_when: false

- name: Add SSH keys of remote hosts to known_hosts
  hosts: all
  gather_facts: false
  connection: local
  tasks:
    - name: Scan for SSH keys of remote hosts
      ansible.builtin.command:
        cmd: ssh-keyscan -H {{ ansible_host }}
      register: ssh_keyscan_result
      changed_when: false

    - name: Add SSH keys to known_hosts
      ansible.builtin.lineinfile:
        path: "~/.ssh/known_hosts"
        line: "{{ ssh_keyscan_result.stdout }}"
        create: false
        mode: '0644'
      when: ssh_keyscan_result.stdout is defined
      changed_when: false

- name: Deploy Node.js App to EC2 Node.js Instance
  hosts: nodejs_group
  become: true
  vars:
    ansible_python_interpreter: /usr/bin/python3  # Set the correct Python path
  tasks:
    - name: Install Docker
      ansible.builtin.yum:
        name: docker
        state: present
        update_cache: true

    - name: Start and enable Docker service
      ansible.builtin.service:
        name: docker
        state: started
        enabled: true

    # Additional tasks to ensure Python and requests library are installed
    - name: Ensure Python is installed
      ansible.builtin.yum:
        name: python3
        state: present

    - name: Install Python requests library
      ansible.builtin.pip:
        name: requests==2.25.1
        executable: pip3

    - name: Create /usr/src/app directory
      ansible.builtin.file:
        path: /usr/src/app
        state: directory
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: '0755'

    - name: Copy Node.js application files to remote
      ansible.builtin.copy:
        src: "{{ item.src }}"
        dest: "/usr/src/app/{{ item.dest }}"
        mode: "{{ item.mode }}"
      loop:
        - { src: 'app.js', dest: 'app.js', mode: '0755' }
        - { src: 'package.json', dest: 'package.json', mode: '0644' }
        - { src: 'Dockerfile', dest: 'Dockerfile', mode: '0644' }


    - name: Build Docker Image
      community.docker.docker_image:
        build:
          path: "/usr/src/app"
        name: my-nodejs-app
        tag: latest
        source: build

    - name: Run Docker container
      community.docker.docker_container:
        name: my-nodejs-app
        image: my-nodejs-app:latest
        ports:
          - "80:3000"
        state: started

- name: Deploy NGINX Container on EC2 NGINX Instance
  hosts: nginx_group
  become: true
  vars:
    ansible_python_interpreter: /usr/bin/python3  # Adjust this path as needed
  tasks:
    - name: Install Docker
      ansible.builtin.yum:
        name: docker
        state: present
        update_cache: true

    # Start and enable Docker service
    - name: Start and enable Docker service
      ansible.builtin.service:
        name: docker
        state: started
        enabled: true

    # Ensure Python is installed
    - name: Ensure Python is installed
      ansible.builtin.yum:
        name: python3
        state: present

    # Install Python requests library
    - name: Install Python requests library
      ansible.builtin.pip:
        name: requests==2.25.1
        executable: pip3
    - name: Debug CN variable
      ansible.builtin.debug:
        var: CN

    # Generate Self-Signed SSL Certificates on Host
    - name: Generate Self-Signed SSL Certificates
      ansible.builtin.shell: |
        mkdir -p /tmp/nginx-certs
        CN="{{ hostvars[inventory_hostname].CN }}"
        openssl req -x509 -newkey rsa:4096 -keyout /tmp/nginx-certs/key.pem -out /tmp/nginx-certs/cert.pem -days 365 -nodes -subj "/CN={{ CN }}"
      args:
        creates: /tmp/nginx-certs/cert.pem

    - name: Change Certificate Permissions
      ansible.builtin.command: "chmod 644 /tmp/nginx-certs/cert.pem && chmod 600 /tmp/nginx-certs/key.pem"
      become: true
      args:
        creates: /tmp/nginx-certs/cert.pem

    # Pull the NGINX Docker Image
    - name: Pull NGINX Docker Image
      community.docker.docker_image:
        name: nginx
        source: pull

    - name: Add Node.js Host to In-Memory Inventory
      ansible.builtin.add_host:
        name: "{{ hostvars[groups['nodejs_group'][0]]['inventory_hostname'] }}"
        groups: dynamic_nodejs
        ansible_host: "{{ hostvars[groups['nodejs_group'][0]]['inventory_hostname'] }}"
      delegate_to: localhost

    # Generate NGINX Configuration File from Template
    - name: Generate NGINX Configuration File
      ansible.builtin.template:
        src: nginx.conf.j2
        dest: "/tmp/nginx.conf"
        mode: '0644'
      vars:
        nodejs_ip: "{{ hostvars['localhost'].nodejs_ip }}"

    # Run NGINX Docker Container with Custom Configuration
    - name: Run NGINX Docker Container
      community.docker.docker_container:
        name: nginx-container
        image: nginx:latest
        ports:
          - "80:80"
          - "443:443"
        volumes:
          - "/tmp/nginx.conf:/etc/nginx/nginx.conf:ro"
          - "/tmp/nginx-certs:/etc/nginx/certs:ro"
        state: started
        restart_policy: always

# ... your existing plays ...

- name: Output Completion Message
  hosts: localhost
  gather_facts: false
  tasks:
    - name: Congratulatory Message
      ansible.builtin.debug:
        msg: "C0n9r47z! Y0u'v3 d3pl0y3d y0ur f1r57 m1cr0-s3rv1c3 4ppl1c47i0n 0n 7h3 cl0ud! Pl3453 pu7 7h15 1n y0ur URL: https://{{ groups['nginx_group'][0] }}"
